#!/usr/bin/env python3
"""
Bazel ChatViz CLI
Entry point script to start the visualization tool
"""

import os
import sys
import argparse
import subprocess
import webbrowser
import time
import signal
from pathlib import Path
from threading import Timer

def find_free_port(start_port=8000):
    """Find a free port starting from start_port"""
    import socket
    for port in range(start_port, start_port + 100):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            try:
                s.bind(('localhost', port))
                return port
            except OSError:
                continue
    return start_port

def start_backend(bep_file=None, port=8000):
    """Start the FastAPI backend server"""
    backend_dir = Path(__file__).parent / "backend"
    
    if not backend_dir.exists():
        print(f"Error: Backend directory not found: {backend_dir}")
        sys.exit(1)
    
    # Check if requirements are installed
    try:
        import fastapi
        import uvicorn
    except ImportError:
        print("Installing Python requirements...")
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "-r", 
            str(backend_dir / "requirements.txt")
        ])
    
    # Start backend server
    cmd = [
        sys.executable, str(backend_dir / "main.py"),
        "--host", "127.0.0.1",
        "--port", str(port)
    ]
    
    if bep_file:
        cmd.extend(["--bep-file", bep_file])
    
    print(f"Starting backend server on port {port}...")
    return subprocess.Popen(cmd)

def start_frontend(backend_port=8000):
    """Start the React frontend development server"""
    frontend_dir = Path(__file__).parent / "frontend"
    
    if not frontend_dir.exists():
        print(f"Error: Frontend directory not found: {frontend_dir}")
        return None
    
    # Check if node_modules exists
    if not (frontend_dir / "node_modules").exists():
        print("Installing Node.js dependencies...")
        subprocess.check_call(["npm", "install"], cwd=frontend_dir)
    
    # Set environment variable for backend URL
    env = os.environ.copy()
    env["REACT_APP_API_URL"] = f"http://localhost:{backend_port}/api"
    
    print("Starting frontend development server...")
    return subprocess.Popen(
        ["npm", "run", "dev"],
        cwd=frontend_dir,
        env=env
    )

def open_browser(url, delay=3):
    """Open browser after a delay"""
    def _open():
        print(f"Opening browser: {url}")
        webbrowser.open(url)
    Timer(delay, _open).start()

def main():
    parser = argparse.ArgumentParser(
        description="Bazel ChatViz - Local build visualization and chat tool",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  bazel-chatviz serve build.json              # Start with BEP file
  bazel-chatviz serve                         # Start without BEP file
  bazel-chatviz serve --port 8080 build.json # Custom port
  bazel-chatviz --help                        # Show this help

Generate BEP file with:
  bazel build --build_event_json_file=build.json //your/target:here
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Serve command
    serve_parser = subparsers.add_parser('serve', help='Start the ChatViz server')
    serve_parser.add_argument(
        'bep_file', 
        nargs='?', 
        help='BEP JSON file to load (optional)'
    )
    serve_parser.add_argument(
        '--port', 
        type=int, 
        default=8000, 
        help='Port for backend server (default: 8000)'
    )
    serve_parser.add_argument(
        '--no-browser',
        action='store_true',
        help='Don\'t automatically open browser'
    )
    serve_parser.add_argument(
        '--frontend-only',
        action='store_true',
        help='Only start frontend (assume backend is running)'
    )
    serve_parser.add_argument(
        '--backend-only',
        action='store_true',
        help='Only start backend server'
    )
    
    # Version command
    parser.add_argument('--version', action='version', version='bazel-chatviz 1.0.0')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    if args.command == 'serve':
        # Validate BEP file if provided
        if args.bep_file and not os.path.exists(args.bep_file):
            print(f"Error: BEP file not found: {args.bep_file}")
            sys.exit(1)
        
        # Find available ports
        backend_port = find_free_port(args.port)
        frontend_port = find_free_port(3000)
        
        processes = []
        
        try:
            # Start backend
            if not args.frontend_only:
                backend_process = start_backend(args.bep_file, backend_port)
                processes.append(('Backend', backend_process))
                
                # Wait a moment for backend to start
                time.sleep(2)
            
            # Start frontend  
            if not args.backend_only:
                frontend_process = start_frontend(backend_port)
                if frontend_process:
                    processes.append(('Frontend', frontend_process))
                
                # Open browser
                if not args.no_browser and not args.backend_only:
                    open_browser(f"http://localhost:{frontend_port}")
            
            if not processes:
                print("No processes started")
                return
            
            print("\n" + "="*50)
            print("Bazel ChatViz is running!")
            print("="*50)
            
            if not args.frontend_only:
                print(f"Backend API: http://localhost:{backend_port}")
                print(f"API Documentation: http://localhost:{backend_port}/docs")
            
            if not args.backend_only:
                print(f"Frontend: http://localhost:{frontend_port}")
            
            if args.bep_file:
                print(f"Loaded BEP file: {args.bep_file}")
            
            print("\nPress Ctrl+C to stop all servers")
            print("="*50)
            
            # Wait for processes
            try:
                while True:
                    # Check if any process has died
                    for name, process in processes:
                        if process.poll() is not None:
                            print(f"\n{name} server stopped unexpectedly")
                            return
                    time.sleep(1)
                    
            except KeyboardInterrupt:
                print("\nShutting down servers...")
                
        except Exception as e:
            print(f"Error starting servers: {e}")
            
        finally:
            # Cleanup processes
            for name, process in processes:
                if process.poll() is None:
                    print(f"Stopping {name} server...")
                    process.terminate()
                    try:
                        process.wait(timeout=5)
                    except subprocess.TimeoutExpired:
                        process.kill()
                        
            print("All servers stopped.")

if __name__ == "__main__":
    main()